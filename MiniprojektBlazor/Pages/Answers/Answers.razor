@inject HttpClient http
@inject AppDataService service

@* Dette er en component, der bruges på QuestionPage.razor til at vise svarene til et spørgsmål. *@

@if (answers is null)
{
	<p>Ingen har svart på dette spørgsmål endnu.</p>
}
else
{
	<div class="card-group d-block" style="padding-left: 1rem">
		@foreach (var answer in answers)
		{
			<div class="card card-answer bg-lite">
				<div class="card-header card-answer-header">
					<div class="card-user d-flex gap-1" style="font-size: small">
						<div class="card-user--info d-inline-flex gap-1">
							<span class="oi oi-dashboard mt-1 gap-1" 
								style="color: @(service.GetColor(answer.GetPrettyName())); font-size: smaller; " />
							<span>
								@answer.Username
							</span>
						</div>
						<time class="card-user--time d-inline-flex gap-1">
							<span>svarede</span>
							<span title="@answer.Date" class="relativetime">
								@(service.GetPrettyDate(@answer.Date))
							</span>
						</time>
					</div>
				</div>
				<div class="card-body card-answer-body">
					<div class="card-left">
						<div>
							<p>@answer.Text</p>
						</div>
					</div>

					<div class="card-right">
						<div class="vote-body">
							<button class="btn btn-vote up"
							@onclick="(async () => await UpvoteAnswer(answer))">
								<span class="oi oi-chevron-top"></span>
							</button>
							<span class="text-center flex-column">
								@answer.GetScore()
							</span>
							<button class="btn btn-vote down"
							@onclick="(async () => await DownvoteAnswer(answer))">
								<span class="oi oi-chevron-bottom"></span>
							</button>
						</div>
					</div>
				</div>
			</div>
		}
	</div>

	<div class="card card-answerbox bg-lite">
		<EditForm EditContext="@editContext" OnValidSubmit="@HandleValidSubmit">
			<DataAnnotationsValidator />

			<div class="form-group">
				<label for="Text" class="col-form-label">
					Svar
				</label>
				<InputTextArea id="Text" class="form-control"
						   placeholder="Skriv et svar"
						   @bind-Value="answer.Text" />
				<ValidationMessage For="() => answer.Text" />
			</div>

			<div class="form-group">
				<label for="Username" class="col-form-label">
					Navn
				</label>
				<InputText id="Username" class="form-control"
					   placeholder="Skriv dit navn"
					   @bind-Value="answer.Username" />
				<ValidationMessage For="() => answer.Username" />
			</div>

			<button type="submit" class="btn btn-qna btn-submit"
				disabled="@formInvalid" >
				Besvar
			</button>

		</EditForm>
	</div>
}

@code {
		[Parameter]
		public int QuestionId { get; set; }
	private Answer[]? answers;
	private AnswerData answer = new() { };

	protected override async Task OnInitializedAsync()
	{
		editContext = new(answer);
		editContext.OnFieldChanged += HandleFieldChanged;
		answer.QuestionId = QuestionId;

		await GetAnswers();
	}

	private async Task GetAnswers()
	{
		answers = await service.GetAnswersByFilter(QuestionId, "upvotes");
	}

	private async Task CreateAnswer()
	{
		await service.CreateAnswer(answer);
		await GetAnswers();
		editContext = new(answer);
		answer = new() { };
	}

	private async Task UpvoteAnswer(Answer a)
	{
		var answer = new AnswerData(a.Id, QuestionId, a.Text, a.Username);

		await service.UpvoteAnswer(answer);
		a.Upvote++;
	}

	private async Task DownvoteAnswer(Answer a)
	{
		var answer = new AnswerData(a.Id, QuestionId, a.Text, a.Username);

		await service.DownvoteAnswer(answer);
		a.Downvote++;
	}

	// ---------------------------------
	// Validation
	private EditContext? editContext;
	private bool formInvalid = true;

	private void HandleFieldChanged(object? sender, FieldChangedEventArgs e)
	{
		if (editContext is not null)
		{
			if (answer.Text is not null &&
				answer.Username is not null)
			{
				formInvalid = !editContext.Validate();
				StateHasChanged();
			}
			StateHasChanged();
		}
	}

	private async Task HandleValidSubmit()
	{
		await CreateAnswer();
	}

	// ---------------------------------

}
