@inject HttpClient http
@inject AppDataService service

@if (answers is null)
{
	<p>Ingen har svart på dette spørgsmål endnu.</p>
}
else
{
	<div class="card-group" style="padding-left: 1rem">
		@foreach (var answer in answers)
		{
			<div class="card card-answer bg-lite">
				<div class="card-header card-answer-header">
					<div class="card-user d-flex gap-1" style="font-size: small">
						<div class="card-user--info d-inline-flex gap-1">
							<span class="oi oi-dashboard mt-1 gap-1" 
								style="color: @(service.GetColor(answer.Username)); font-size: smaller; " />
							<span>
								@answer.Username
							</span>
						</div>
						<time class="card-user--time d-inline-flex gap-1">
							<span>svarede</span>
							<span title="@answer.Date" class="relativetime">
								@(service.GetPrettyDate(@answer.Date))
							</span>
						</time>
					</div>
				</div>
				<div class="card-body card-answer-body">
					<div class="card-left">
						<div>
							<p>@answer.Text</p>
						</div>
					</div>

					<div class="card-right">
						<div class="vote-body">
							<button class="btn btn-vote up"
							@onclick="(async () => await UpvoteAnswer(answer))">
								<span class="oi oi-chevron-top"></span>
							</button>
							<span class="text-center flex-column">
								@answer.GetScore()
							</span>
							<button class="btn btn-vote down"
							@onclick="(async () => await DownvoteAnswer(answer))">
								<span class="oi oi-chevron-bottom"></span>
							</button>
						</div>
					</div>
				</div>
			</div>
		}
	</div>

	<div class="card card-answerbox bg-lite">
		<EditForm Model="@newAnswer" OnValidSubmit="@CreateAnswer">

			<div class="form-group">
				<label for="Text" class="col-form-label">
					Svar
				</label>
				<textarea id="Text" class="form-control" 
					placeholder="Skriv et svar" 
					minlength="10"
					maxlength="300"
					@bind="@newAnswer.Text" required/>
			</div>

			<div class="form-group">
				<label for="Username" class="col-form-label">
					Navn
				</label>
				<input type="text" id="Username" class="form-control" 
					placeholder="Skriv dit navn" 
					minlength="2"
					maxlength="12"
					@bind="@newAnswer.Username" required/>
			</div>

			<button type="submit" class="btn btn-qna btn-submit">
				Besvar
			</button>

		</EditForm>
	</div>
}

@code {
	[Parameter]
	public int QuestionId { get; set; }

	private AnswerData[]? answers;

	private AnswerData newAnswer = new() { };

	protected override async Task OnInitializedAsync()
	{
		await ListAnswers();
	}

	private async Task ListAnswers()
	{
		answers = await service.GetAnswersById(QuestionId);
	}

	private async Task CreateAnswer()
	{
		var _username = FormatName(newAnswer.Username);

		newAnswer.Username = _username;
		newAnswer.QuestionId = QuestionId;

		await service.CreateAnswer(newAnswer);
		await ListAnswers();
		newAnswer = new() { };
	}

	private async Task UpvoteAnswer(AnswerData answer)
	{
		answer.QuestionId = QuestionId;
		await service.UpvoteAnswer(answer);
		await ListAnswers();
	}

	private async Task DownvoteAnswer(AnswerData answer)
	{
		answer.QuestionId = QuestionId;
		await service.DownvoteAnswer(answer);
		await ListAnswers();
	}

	private string FormatName(string name) {
		return char.ToUpper(name[0]) + name.Substring(1).ToLower();
	}

}
