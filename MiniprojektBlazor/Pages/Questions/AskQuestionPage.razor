@page "/questions/ask"

@* Dette er siden, hvor man kan indsende et spørgsmål. *@

@inject HttpClient http
@inject AppDataService service
@inject NavigationManager navigation

<PageTitle>Stil et spørgsmål</PageTitle>

<h3>Stil et spørgsmål</h3>

<div class="card card-askpage bg-lite">
	<EditForm EditContext="@editContext" OnValidSubmit="@HandleValidSubmit">
		<DataAnnotationsValidator />

		<div class="form-group">
			<label for="Title" class="col-form-label">
				Overskrift
			</label>
			<InputText id="Title" class="form-control"
					   placeholder="Overskrift på spørgsmålet"
					   @bind-Value="question.Title" />
			<ValidationMessage For="() => question.Title" />
		</div>

		<div class="form-group">
			<label for="Text" class="col-form-label">
				Spørgsmål
			</label>
			<InputTextArea id="Text" class="form-control"
						   placeholder="Skriv et spørgsmål" rows="6"
						   @bind-Value="question.Text" />
			<ValidationMessage For="() => question.Text" />
		</div>

		<div class="form-group">
			<label for="Subject" class="col-form-label">
				Emne
			</label>
			<InputSelect id="Subject" class="form-select"
						 @bind-Value="question.SubjectId">

				@if (subjects is not null)
				{
					<option>Vælg et emne...</option>
					@foreach (var subject in subjects)
					{
						<option value="@subject.Id">@subject.Name</option>
					}
				}
			</InputSelect>

		</div>

		<div class="form-group">
			<label for="Username" class="col-form-label">
				Navn
			</label>
			<InputText id="Username" class="form-control"
					   placeholder="Skriv dit navn"
					   @bind-Value="question.Username" />
			<ValidationMessage For="() => question.Username" />
		</div>

		<button type="submit" class="btn btn-qna btn-submit"
			disabled="@formInvalid" >
			Send
		</button>

	</EditForm>
</div>


@code {
	private int? SubjectId;
	private Subject[]? subjects;
	private QuestionData question = new() { };

	protected override async Task OnInitializedAsync()
	{
		editContext = new(question);
		editContext.OnFieldChanged += HandleFieldChanged;

		await GetSubjects();
	}

	private async Task GetSubjects()
	{
		subjects = await service.GetSubjects();
	}

	private async Task CreateQuestion()
	{
		await service.CreateQuestion(question);

		navigation.NavigateTo("questions");
	}

	// ---------------------------------
	// Validation
	private EditContext? editContext;
	private bool formInvalid = true;

	private void HandleFieldChanged(object? sender, FieldChangedEventArgs e)
	{
		if (editContext is not null)
		{
			if (question.Title is not null &&
				question.Text is not null &&
				question.Username is not null &&
				question.SubjectId is not 0 &&
				SubjectId is not null)
			{
				formInvalid = !editContext.Validate();
				StateHasChanged();
			}
			StateHasChanged();
			SubjectId = question.SubjectId;
		}
	}

	private async Task HandleValidSubmit()
	{
		await CreateQuestion();
	}

	// ---------------------------------

}
