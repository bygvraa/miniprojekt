@page "/questions"

@inject HttpClient http
@inject AppDataService service

<PageTitle>Spørgsmål</PageTitle>

<div class="d-flex">
	<h1 class="flex-grow-1 flex-shrink-1">Spørgsmål</h1>
	<AskQuestionPrompt />
</div>

<p>Nyeste spørgsmål</p>

@if (questions is null)
{
	<p><em>Indlæser...</em></p>
}
else
{
	@foreach (var question in questions)
	{
		<div>
			<div class="rank">
				@*@(index++)*@
			</div>
			<div class="card-group card-question-group">
				<div class="card card-question bg-lite">
					<div class="card-header card-question-header">
						<div class="card-summary card-question-summary">
							<div class="d-inline-flex gap-1">
								<span class="mr-1">
								   @question.GetScore()
								</span>
								@if (@question.GetScore() == 1)
								{
									<span>stemme</span>
								}
								else
								{
									<span>stemmer</span>
								}
							</div>
							<div>
								<span></span>
								<span></span>
							</div>
						</div>
					</div>
					<div class="card-body">
						<div style="float: left">
							<h5 class="card-title card-quest-title">
								<a class="text-decoration-none" href="/questions/@question.Id/">
									@question.Title
								</a>
							</h5>
							<p class="card-text card-question-text">
								@question.Text
							</p>
						</div>
					</div>
					<div class="card-footer card-question-footer">
						<div class="subject-tag">
							<a class="a-link text-decoration-none" href="/subjects/@question.Subject.Id/">
								@question.Subject.Name
							</a>
						</div>
						<div class="card-user d-flex">
							<div class="card-user--info">
								<p class="card-text card-user-text">
									<span class="oi oi-dashboard" style="color: @(service.GetColor(question.Username))" />
									<span>
										@question.Username
									</span>
								</p>
							</div>
							<time class="card-user--time">
								<span>spurgte</span>
								<span title="@question.Date" class="relativetime">
									@(service.GetPrettyDate(@question.Date))
								</span>
							</time>
						</div>
					</div>
				</div>
			</div>
		</div>
	}
	<div>
		<nav aria-label="...">
			<ul class="pagination">

				<li class="page-item @PageStatus(PreviousPageStatus)">
					<a class="page-link"
						href="/questions?page=@PreviousPage"
						@onclick="@(async () => await PageNavigation(PreviousPage))">Forrige</a>
				</li>

				<li class="page-item @PageStatus(NextPageStatus)">
					<a class="page-link"
						href="/questions?page=@NextPage"
						@onclick="@(async () => await PageNavigation(NextPage))" >Næste</a>
				</li>

			</ul>
		</nav>
	</div>
}

@code {
	[Parameter]
	[SupplyParameterFromQuery(Name = "page")]
	public int? Page { get; set; }

	public int? NextPage;
	public int? PreviousPage;

	public string NextPageStatus = "disabled";
	public string PreviousPageStatus = "disabled";

	public string PageStatus(string status)
	{	
		return status;
	}


	private QuestionData[]? questions;

	// private int index = 1;


	protected override async Task OnInitializedAsync()
	{
		// I tilfælde af, at man navigerer ind på ".../questions/", så bliver 'Page = 1',
		// og man kommer derved ind på den første side med spørgsmål.
		@if (Page is null)
		{
			Page = 1;
		}

		questions = await GetQuestionsByPage(Page);


		NextPage = Page + 1;

		@if (Page > 1)
		{
			PreviousPage = Page - 1;
		}

		@if ((await GetQuestionsByPage(NextPage))?.Count() != 0)
		{
			NextPageStatus = "active";
		}
	}

	protected async Task<QuestionData[]?> GetQuestionsByPage(int? page)
	{
		return await service.GetQuestionsByPage(page, 3);
	}

	protected async Task PageNavigation(int? page)
	{
		questions = await GetQuestionsByPage(page);

		@if (Page > 1)
		{
			PreviousPage = Page - 1;
			PreviousPageStatus = "active";
		}
		else
		{
			PreviousPageStatus = "disabled";
		}

		NextPage = Page + 1;
		@if ((await GetQuestionsByPage(NextPage))?.Count() != 0)
		{
			NextPageStatus = "active";
		}
		else
		{
			NextPageStatus = "disabled";
		}
	}

}
