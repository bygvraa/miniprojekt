@page "/questions"

@* Dette er siden, der viser en oversigt over alle spørgsmål fra alle kategorier. *@

@inject HttpClient http
@inject AppDataService service

<PageTitle>Spørgsmål</PageTitle>

<div class="title d-flex">
	<h1 class="flex-grow-1 flex-shrink-1">Spørgsmål</h1>
	<AskQuestionPrompt />
</div>

<div class="subtitle">
	<p>Nyeste spørgsmål</p>
</div>

@if (questions is null)
{
	<p><em>Indlæser...</em></p>
}
else
{
	<div class="card-group card-question-group">
		@foreach (var question in questions)
		{
			<div class="card card-question bg-lite">
				<div class="card-header card-question-header">
					<div class="card-summary card-question-summary">
						<div class="d-inline-flex gap-1">
							<span class="mr-1">
								@question.GetTotalVotes()
							</span>
						</div>
					</div>
				</div>
				<div class="card-body" style="padding: .5rem 1rem;">
					<div style="float: left">
						<h5 class="card-title card-question-title">
							<a class="text-decoration-none" href="/questions/@question.Id/">
								@question.Title
							</a>
						</h5>
						<p class="card-text card-question-text">
							@question.GetShortText(300)
						</p>
					</div>
				</div>
				<div class="card-footer card-question-footer">
					<div class="subject-tag">
						<a class="a-link text-decoration-none" href="/subjects/@question.Subject.Id/">
							@question.Subject.Name
						</a>
					</div>
					<div class="card-user d-flex">
						<div class="card-user--info">
							<p class="card-text card-user-text">
								<span class="oi oi-dashboard" style="color: @(service.GetColor(question.Username))" />
								<span>
									@question.Username
								</span>
							</p>
						</div>
						<time class="card-user--time">
							<span title="@question.Date" class="relativetime">
								@(service.GetPrettyDate(@question.Date))
							</span>
						</time>
					</div>
				</div>
			</div>
		}
	</div>
	<div>
		<nav aria-label="...">
			<ul class="pagination">

				<li class="page-item @PageStatus(PreviousPageStatus)">
					<a class="page-link btn-pageination"
						href="/questions?page=@PreviousPage"
						@onclick="@(async () => await PageNavigation(PreviousPage))" >
						Forrige
					</a>
				</li>

				<li class="page-item @PageStatus(NextPageStatus)">
					<a class="page-link btn-pageination"
						href="/questions?page=@NextPage"
						@onclick="@(async () => await PageNavigation(NextPage))" >
						Næste
					</a>
				</li>

			</ul>
		</nav>
	</div>
}

@code {
	[Parameter]
	[SupplyParameterFromQuery(Name = "page")]
	public int? Page { get; set; }

	public int? NextPage;
	public int? PreviousPage;

	public string NextPageStatus = "disabled";
	public string PreviousPageStatus = "disabled";

	private Question[]? questions;
	private Question[]? questionsNextPage;

	protected override async Task OnInitializedAsync() {
		// I tilfælde af, at man navigerer ind på ".../questions/",
		// eller hvis 'Page' er lavere end 1, så bliver 'Page = 1',
		// og man kommer derved ind på den første side med spørgsmål.
		@if (Page is null or < 1) {
			Page = 1;
		}

		await PageNavigation(Page);
	}

	protected async Task<Question[]?> GetQuestionsByPage(int? page)
	{
		return await service.GetQuestionsByPage(page, 4);
	}

	protected async Task PageNavigation(int? page)
	{
		questions = await GetQuestionsByPage(page);

		@if (Page is not 1) {
			// hvis man IKKE er på den første side
			PreviousPage = Page - 1;
			PreviousPageStatus = "active";
		} else {
			// hvis man er på den første side
			PreviousPageStatus = "disabled";
		}

		NextPage = Page + 1;
		questionsNextPage = await GetQuestionsByPage(NextPage);

		@if (questionsNextPage?.Count() is not 0) {
			// hvis der er spørgsmål på næste side
			NextPageStatus = "active";
		} else {
			// hvis der IKKE er spørgsmål på næste side
			NextPageStatus = "disabled";
		}
	}

	protected string PageStatus(string status)
	{	
		return status;
	}

}
