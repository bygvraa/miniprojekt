@page "/questions"

@inject HttpClient http
@inject AppDataService service

<PageTitle>Spørgsmål</PageTitle>

<div class="d-flex">
	<h1 class="flex-grow-1 flex-shrink-1">Spørgsmål</h1>
	<AskQuestionPrompt />
</div>

<p>Nyeste spørgsmål</p>

@if (questions == null)
{
	<p><em>Indlæser...</em></p>
}
else
{
	@foreach (var question in questions)
	{
		<div>
			<div class="rank">
				@*@(index++)*@
			</div>
			<div class="card-group card-question-group">
				<div class="card card-question bg-light">
					<div class="card-header card-question-header">
						<div class="card-summary d-flex w-auto gap-2">
							<div class="d-inline-flex gap-1">
								<span class="mr-1">
								   @question.GetScore()
								</span>
								@if (@question.GetScore() == 1)
								{
									<span>stemme</span>
								}
								else
								{
									<span>stemmer</span>
								}
							</div>
							<div>
								<span></span>
								<span></span>
							</div>
						</div>
					</div>
					<div class="card-body">
						<div style="float: left">
							<h5 class="card-title fw-normal fs-5">
								<a class="text-decoration-none" href="/questions/@question.Id/">
									@question.Title
								</a>
							</h5>
							<p class="card-text fw-mormal fs-6">
								@question.Text
							</p>
						</div>
						<div style="display: flex;align-items: center;flex-direction: column; float: right;">
						</div>
					</div>
					<div class="card-footer card-question-footer">
						<div class="subject-tag">
							<a class="text-decoration-none" href="/subjects/@question.Subject.Id/">
								@question.Subject.Name
							</a>
						</div>
						<div class="card-user d-flex gap-1">
							<div class="card-user--info">
								<p class="card-text flex-row text-nowrap">
									<span class="oi oi-dashboard" style="color: @(service.GetColor(question.Username))" />
									<span>
										@question.Username
									</span>
								</p>
							</div>
							<time class="card-user--time">
								<span>spurgte</span>
								<span title="@question.Date" class="relativetime">
									@(service.GetPrettyDate(@question.Date))
								</span>
							</time>
						</div>
					</div>
				</div>
			</div>
		</div>
	}
}

@code {
	private QuestionData[]? questions;
	private int index = 1;

    protected override async Task OnInitializedAsync()
    {
        questions = await service.ListQuestionsByNewest();
    }

}
