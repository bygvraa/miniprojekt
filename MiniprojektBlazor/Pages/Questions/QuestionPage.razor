@page "/questions/{QuestionId:int}/"

@* Denne side viser ét specifikt spørgsmål, samt eventuelle svar på dette spørgsmål. *@

@inject HttpClient http
@inject AppDataService service

<PageTitle>Spørgsmål</PageTitle>

@if (question is null)
{
	<div class="d-flex">
		<p class="flex-grow-1 flex-shrink-1">Indlæser...</p>
		<AskQuestionPrompt />
	</div>
}
else
{
	<div class="questionpage">
		<div class="card-questionpage-header">
			<div class="card-summary card-questionpage-summary">
				<div class="questionpage-subject-tag">
					@question.Subject.Name
				</div>
				<div>
					<h5 class="card-title card-question-title m-0">
						@question.Title
					</h5>
				</div>
				<div class="card-user d-flex text-nowrap small">
					<time class="card-user--time">
						<span>Indsendt</span>
						<span title="@question.Date" class="relativetime">
							@(service.GetPrettyDate(@question.Date))
						</span>
					</time>
					<div class="card-user--info">
						<span>af</span>
						<span class="oi oi-dashboard mt-1" 
							style="color: @(service.GetColor(question.GetPrettyName())); font-size: smaller; " />
						<span>
							@question.Username
						</span>
					</div>
				</div>
			</div>
			<AskQuestionPrompt />
		</div>
		<div class="card-body card-question-body">
			<div class="card-left">
				<div>
					<p class="card-text card-question-text white-space-break">
						@question.GetFullText()
					</p>
				</div>
			</div>
			<div class="card-right">
				<div class="vote-body">
					<button class="btn btn-vote up"
						@onclick="(async () => await UpvoteQuestion(question))">
						<span class="oi oi-chevron-top"></span>
					</button>
					<span class="text-center flex-column">
						@question.GetScore()
					</span>
					<button class="btn btn-vote down"
						@onclick="(async () => await DownvoteQuestion(question))">
						<span class="oi oi-chevron-bottom"></span>
					</button>
				</div>
			</div>
		</div>
		<div>
			<Answers QuestionId="@question.Id" />
		</div>
	</div>
}

@code {
	[Parameter]
	public int QuestionId { get; set; }

	private Question? question;

	protected override async Task OnInitializedAsync()
	{
		await GetQuestion();
	}

	private async Task GetQuestion()
	{
		question = await service.GetQuestionById(QuestionId);
	}

	private async Task UpvoteQuestion(Question q)
	{
		var question = new QuestionData(q.Id, q.Subject.Id, q.Title, q.Text, q.Username);

		await service.UpvoteQuestion(question);
		await GetQuestion();
	}

	private async Task DownvoteQuestion(Question q)
	{
		var question = new QuestionData(q.Id, q.Subject.Id, q.Title, q.Text, q.Username);

		await service.DownvoteQuestion(question);
		await GetQuestion();
	}

}
